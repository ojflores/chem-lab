# Official framework image. Look for the different tagged releases at:
# https://hub.docker.com/r/library/python

# Pick zero or more services to be used on all builds.
# Only needed when using a docker container to run your tests in.
# Check out: http://docs.gitlab.com/ce/ci/docker/using_docker_images.html#what-is-a-service
services:
  - mysql:latest

image: python:latest

variables:
  MYSQL_DATABASE: testing_db
  #MYSQL_USER: root
  MYSQL_ROOT_PASSWORD: testing
  #MYSQL_HOST: 127.0.0.1
  #MYSQL_PORT: 3306

# This folder is cached between builds
# http://docs.gitlab.com/ce/ci/yaml/README.html#cache
# cache:
#   paths:
#   - ~/.cache/pip/

# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
before_script:
  - python -V                                   # Print out python version for debugging
  # - mysql -e 'SET GLOBAL SQL_MODE="STRICT_ALL_TABLES";'
  #
  # # Uncomment next line if your Django app needs a JS runtime:
  # # - apt-get update -q && apt-get install nodejs -yqq
  # - pip install pipenv
  # - pipenv install --dev

# To get Django tests to work you may need to create a settings file using
# the following DATABASES:
#
# DATABASES = {
#     'default': {
#        'ENGINE': 'django.db.backends.postgresql_psycopg2',
#        'NAME': 'ci',
#        'USER': 'postgres',
#        'PASSWORD': 'postgres',
#        'HOST': 'postgres',
#        'PORT': '5432',
#    },
# }
#
# and then adding `--settings app.settings.ci` (or similar) to the test command
connect:
  image: mysql
  script:
  - echo "SELECT 'OK';" | mysql --user=root --password="$MYSQL_ROOT_PASSWORD" --host=mysql "$MYSQL_DATABASE"

# script:
#   - python manage.py test
